extends layout/layout.pug

block script
    script(src='/js/app/classroom.js')
    script(src='/easy-autocomplete/dist/jquery.easy-autocomplete.min.js')
    link(rel='stylesheet', href='/easy-autocomplete/dist/easy-autocomplete.min.css')
    link(rel='stylesheet' href='/css/main.css')
    script(type='text/javascript').
      const options = {}
      $.ajax({
        url: '/api/usernames',
        success: function (result) {
          options.data = result
          console.log('options : ' + options)
        }
      })
      $(document).ready(function () {
        $('#settings-modal').modal({
          closable: false,
          transition: 'fade up',
          onApprove : function() {
            //$('.ui.form').submit();
            return false;
          },
        })
        $('#assignment-modal').modal({
          closable: false,
          transition: 'fade up',
          onApprove : function() {
            //$('.ui.form').submit();
            return false;
          },
        })
        $('#alert-modal').modal({
          closable: false,
          transition: 'fade up',
        })
        $('.newProject').click(function () {
          $('#newProject-modal').modal('show');
        });
        $('.main-menu').click(function () {
          showMainContainer()
        });
        $('.students-menu').click(function () {
          showStudentContainer()
        });
        $('.pairs-menu').click(function () {
          showPairingDateTimeContainer()
        });
        $('.settings-menu').click(function () {
          var day = '!{section.day}'
          var time_start = '!{section.time_start}'
          var time_end = '!{section.time_end}'
          var time_start_hh = time_start[0] + time_start[1]
          var time_start_mm = time_start[3] + time_start[4]
          var time_start_ap = time_start[5] + time_start[6]
          var time_end_hh = time_end[0] + time_end[1]
          var time_end_mm = time_end[3] + time_end[4]
          var time_end_ap = time_end[5] + time_end[6]
          $('.day option[value=\'' + day + '\']').attr('selected', 'selected');
          $('.timeStartHh option[value=' + time_start_hh + ']').attr('selected', 'selected');
          $('.timeStartMm option[value=' + time_start_mm + ']').attr('selected', 'selected');
          $('.timeStartAp option[value=' + time_start_ap + ']').attr('selected', 'selected');
          $('.timeEndHh option[value=' + time_end_hh + ']').attr('selected', 'selected');
          $('.timeEndMm option[value=' + time_end_mm + ']').attr('selected', 'selected');
          $('.timeEndAp option[value=' + time_end_ap + ']').attr('selected', 'selected');
          $('.ui.form').trigger('reset');
          $('.ui.form .field.error').removeClass('error');
          $('.ui.form.error').removeClass('error');
          $('#settings-modal').modal('show');
        });
        $('.ui.form.updateSection').form({
          fields: {
            course_name: {
              identifier: 'course_name',
              rules: [
                {
                  type   : 'empty',
                  prompt : 'Please enter your course name'
                }
              ]
            },
            section: {
              identifier: 'section',
              rules: [
                {
                  type   : 'empty',
                  prompt : 'Please enter your section'
                },
                {
                  type : 'regExp[[0-9]]',
                  prompt : 'This section is not valid!'
                }
              ]
            },
            room: {
              identifier: 'room',
              rules: [
                {
                  type   : 'empty',
                  prompt : 'Please enter your room'
                }
              ]
            }
          },
          onSuccess : function() {
            $('#newClassroom-modal').modal('hide');
          },
        })
        $('.newPairingSession').click(function () {
          
          /* var date_time = new Date()
          var str_date_time = date_time.toString()
          var split_date_time = str_date_time.split(' ')
          var slice_date_time = split_date_time.slice(0, 5)
          date_time = slice_date_time.join(' ')
          $('#date_time').attr('value', date_time)
          $('#pairingDateTime-modal').modal('show'); */
        });
        /* $('#createPairingDateTime').click(function () {
          const date_time = $('#date_time').attr('value')
          const section_id = $('#section_id').attr('value')
          const status = $(this).attr('value')
          const parameters = {date_time: date_time, section_id: section_id}
          $.get('classroom/getPairingDateTime',parameters,function(data){
            if(status <= 0){
              var pairingTime = data.pairingTime;
              if(status < 0) {
                pairingTime = 1
              } else pairingTime++
              $.ajax({
                url: '/api/createPairingDateTime',
                type: 'post',
                data: parameters,
                success: function (res) {
                  if (typeof res.pairing_date_time_id == 'number') {
                    var item = $('<div id=\'pairing' + res.pairing_session_id + '\' class=\'item\' style=\'padding-top:10px; padding-bottom:10px; padding-left:15px; padding-right:15px;\'></div>')
                    var content = $('<div class=\'content\'></div>')
                    var grid = $('<div class=\'ui grid\'></div>')
                    var extra = $('<div class=\'extra\'><div id=\'status\' class=\'ui label\' style=\'background-color:#f1c232; color:white;\'>PENDING</div></div>')
                    var elevenColumn = $('<div class=\'eleven wide column\'><b style=\'font-size:1.2em\'><header class=\'header-pending-and-active\'>Session : ' + pairingTime + '</header></b><div class=\'description\'><font class=\'font-pending-and-active\'>' + res.date_time + '</font></div></div>')
                    var fiveColumn = $('<div id=\'pairing-button-column\' class=\'five wide column\'><div class=\'ui right floated button blue\' id=\'pairStudent\' style=\'text-color:white;\'> Pair </div></div>')
                    grid.append(elevenColumn)
                    grid.append(fiveColumn)
                    content.append(grid)
                    content.append(extra)
                    item.append(content)
                    $('#pairingSession').prepend(item)
                    $('.ui.pointing.dropdown').dropdown();
                    onClickPairStudent()
                    $('#pairing_session_id').attr('value', res.pairing_session_id)
                    $('#createPairingDateTime').attr('value', 1)
                  }
                }
              })

            } else {
              $('#alert-header').text('Pairing session')
              $('#alert-message').text('You can\'t create session!')
              $('#alert-modal').modal('show')
            }
          })
        }) */
        $('.removeStudent').click(function () {
          $('#messageConfirm').text('Are you sure you want to remove \"' + $(this).attr('name') + '\" from this classroom?')
          $('.enrollment_id').attr('value', $(this).attr('id'))
          $('.student_id').attr('value', $(this).attr('value'))
          $('#confirmRemoveStudent').modal('show');
        });
        $('.yesIamSure').click(function () {
          var enrollment_id = $('.enrollment_id').attr('value')
          $.ajax({
            url: '/api/removeStudent',
            type: 'delete',
            data: {
              enrollment_id
            },
            success: function (res) {
              if(res.status == 'Remove the student from the classroom complete.') {
                $('#' + $('.student_id').attr('value')).remove()
              } else {
                alert(res.status)
              }
            }
          })
        })
        $('.newAssignment').click(function (){
          $('#assignment-modal').modal('show')
        })
        $('.ui.form.createAssignment').form({
          fields: {
            title: {
              identifier: 'title',
              rules: [
                {
                  type   : 'empty',
                  prompt : 'Please enter your title'
                },
                {
                  type : 'regExp[[a-zA-Z0-9]]',
                  prompt : 'This title is not valid!'
                }
              ]
            },
            description: {
              identifier: 'description',
              rules: [
                {
                  type   : 'empty',
                  prompt : 'Please enter your description'
                }
              ]
            },
            input_specification: {
              identifier: 'input_specification',
              rules: [
                {
                  type   : 'empty',
                  prompt : 'Please enter your input specification'
                }
              ]
            },
            output_specification: {
              identifier: 'output_specification',
              rules: [
                {
                  type   : 'empty',
                  prompt : 'Please enter your output specification'
                }
              ]
            },
            sample_input: {
              identifier: 'sample_input',
              rules: [
                {
                  type   : 'empty',
                  prompt : 'Please enter your sample input'
                }
              ]
            },
            sample_output: {
              identifier: 'sample_output',
              rules: [
                {
                  type   : 'empty',
                  prompt : 'Please enter your sample output'
                }
              ]
            }
          },
          onSuccess : function() {
            $('#assignment-modal').modal('hide');
          },
        })
      });
      function showMainContainer() {
        $('#main-container').show();
        $('#first-sub-container').hide();
        $('#second-sub-container').hide();
      }
      function showStudentContainer(){
        $('#main-container').hide();
        $('#first-sub-container').show();
        $('#second-sub-container').hide();
      }
      function showPairingDateTimeContainer(){
        $('#main-container').hide();
        $('#first-sub-container').hide();
        $('#second-sub-container').show();
      }
    style.
      @media (min-height: 200px) {
      .ui.footer.form-page { /* Increased specificity for SO snippet priority */
      position: absolute;
      width: 100%;
      }
      }

block content
    input#pairing_date_time_id(type='hidden', value=pairingDateTimes[0].pairing_session_id)
    input#section_id(type='hidden', value=`${section.section_id}`)
    +pairStudent(user, students)
    .ui.small.modal#newProject-modal
      i.close.icon
      .header Create New Project
      .content
        form.ui.form(action='/project', method='POST')
          .field
            label Project Name :
            |
            input(type='text', name='title', placeholder='Your Project Name')
          .field
            label Description :
            |
            input(type='text', name='description', placeholder='Something about your project')
          .content
            .ui.grid
              .six.wide.column
                .field
                  label Language :
                  select.ui.dropdown(name='language')
                    option(value='0') Python
              .six.wide.column
                .field
                  label Buddy ID :
                  |
                  input(type='hidden' name='creator_id' value=user._id)
                  input(type='hidden' name='creator' value=user.username)
                  input#collaborator-hidden(type='hidden' name='collaborator')
                  input#collaborator(type='text',name='collaborator', placeholder='Search users...', disabled)
              .four.wide.column
                  button.ui.positive.labeled.icon.button(id='add-collaborator' type='button')
                    i.user.icon
                    |  Add
          .field
            label Time  :
            select.ui.dropdown(name='swaptime')
               option(value='15') 15 minutes (Recommended)
               option(value='10') 10 minutes
               option(value='5') 5 minutes
               option(value='1') 1 minute
            input(type='hidden' name='status' value="pending")

          .ui.basic.center.aligned.segment()
            .actions
              button.ui.button.approve.green(type='submit') Create
              .ui.button.approve.red(data-value='cancel') Cancel

    .ui.small.modal#confirmRemoveStudent
      i.close.icon
      .header Remove Student
      .content
        p#messageConfirm Are you sure you want to remove the student from this classroom?
        input.enrollment_id(type='hidden', name='enrollment_id')
        input.student_id(type='hidden', name='student_id')
        .ui.basic.center.aligned.segment
          .actions
            button.ui.button.approve.green.yesIamSure Yes
            .ui.button.cancel.red.noIamNotSure No

    .ui.small.modal#pairingDateTime-modal
      i.close.icon
      .header Pairing Session
      .content
        .ui.fluid.action.input
          input#date_time(type='text', name='date_time')
          .actions
            button.ui.button.approve.green#createPairingDateTime(type='submit', value='' + pairingDateTimes[0].status)
              b(style='font-size:1.2em;') Create

    .ui.small.modal#alert-modal
      i.close.icon
      .header#alert-header Alert!
      .content
        p#alert-message Something content
        .ui.basic.center.aligned.segment
          .actions
            button.ui.button.cancel.green(data-value='cancel') OK

    .ui.small.modal#confirm-modal
      .header#confirm-header Alert!
      .content
        input#input_confirm_modal(type='hidden')
        p#confirm-message Something message.
        .ui.basic.center.aligned.segment
          .actions
            button.ui.button.approve.green#confirm-button(type='submit') Confirm
            .ui.button.approve.red#cancel-button(data-value='cancel') Cancel


    .ui.small.modal#settings-modal
      i.close.icon
      .header Settings Classroom
      .content
        form.ui.form.updateSection.segment(action='/classroom/updateSection', method='POST')
          .field
            label Class Name :
            |
            input(type='text', name='course_name', placeholder='Your class name', value=`${section.course_name}`)
          .ui.grid
            .two.column.row
              .column
                .field
                  label Section :
                  |
                  input(type='text', name='section', placeholder='Your section', maxlength='3', value=`${section.section}`)
              .column
                .field
                  label Room :
                  |
                  input(type='text', name='room', placeholder='Your room', maxlength='4', value=`${section.room}`)
          .ui.grid
            .four.wide.column
              .field
                label Day  :
                select.ui.dropdown.day(name='day')
                   option(value='Mon.') Monday
                   option(value='Tue.') Tuesday
                   option(value='Wed.') Wednesday
                   option(value='Thu.') Thursday
                   option(value='Fri.') Friday
                   option(value='Sat.') Saturday
                   option(value='Sun.') Sunday
            .six.wide.column(style='text-align:center;')
              b Time start
              .ui.labeled.input
                select.ui.dropdown.timeStartHh(name='time_start_hh')
                  option(value='00')  00
                  option(value='01')  01
                  option(value='02')  02
                  option(value='03')  03
                  option(value='04')  04
                  option(value='05')  05
                  option(value='06')  06
                  option(value='07')  07
                  option(value='08')  08
                  option(value='09')  09
                  option(value='10')  10
                  option(value='11')  11
                  option(value='12')  12
                .ui.label
                  b(color='black') :
                select.ui.dropdown.timeStartMm(name='time_start_mm')
                  option(value='00')  00
                  option(value='05')  05
                  option(value='10')  10
                  option(value='15')  15
                  option(value='20')  20
                  option(value='25')  25
                  option(value='30')  30
                  option(value='35')  35
                  option(value='40')  40
                  option(value='45')  45
                  option(value='50')  50
                  option(value='55')  55
                select.ui.dropdown.timeStartAp(name='time_start_ap')
                  option(value='am.')  am.
                  option(value='pm.')  pm.
            .six.wide.column(style='text-align:center;')
              b Time end
              .ui.labeled.input
                select.ui.dropdown.timeEndHh(name='time_end_hh')
                  option(value='00')  00
                  option(value='01')  01
                  option(value='02')  02
                  option(value='03')  03
                  option(value='04')  04
                  option(value='05')  05
                  option(value='06')  06
                  option(value='07')  07
                  option(value='08')  08
                  option(value='09')  09
                  option(value='10')  10
                  option(value='11')  11
                  option(value='12')  12
                .ui.label
                  b(color='black') :
                select.ui.dropdown.timeEndMm(name='time_end_mm')
                  option(value='00')  00
                  option(value='05')  05
                  option(value='10')  10
                  option(value='15')  15
                  option(value='20')  20
                  option(value='25')  25
                  option(value='30')  30
                  option(value='35')  35
                  option(value='40')  40
                  option(value='45')  45
                  option(value='50')  50
                  option(value='55')  55
                select.ui.dropdown.timeEndAp(name='time_end_ap')
                  option(value='am.')  am.
                  option(value='pm.')  pm.
          input(type='hidden', name='course_id', value=`${section.course_id}`)
          input(type='hidden', name='section_id', value=`${section.section_id}`)
          .ui.basic.center.aligned.segment
            .actions
              button.ui.button.approve.green(type='submit') Update
              .ui.button.cancel.red(data-value='cancel') Cancel
          .ui.error.message

    .ui.small.modal#assignment-modal
      i.close.icon
      .header Assignment
      .content
        form.ui.form.createAssignment.segment(action='/assignment', method='POST')
          .field
            label Title :
            |
            input(type='text', name='title', placeholder='Your title')
          .field
            label Description :
            |
            textarea(type='text', name='description', placeholder='Some content...', style='resize:none;')
          .ui.grid
            .two.column.row
              .column
                .field
                  label Input specification :
                  |
                  textarea(row='2', type='text', name='input_specification', placeholder='Input specification...', style='resize:none;')
              .column
                .field
                  label Output specification :
                  |
                  textarea(row='2', type='text', name='output_specification', placeholder='Output specification...', style='resize:none;')
          .ui.grid
            .two.column.row
              .column
                .field
                  label Sample Input :
                  |
                  input(type='text', name='sample_input', placeholder='Sample Input...')
              .column
                .field
                  label Sample Output :
                  |
                  input(type='text', name='sample_output', placeholder='Sample Output...')
          input(type='hidden', name='section_id', value=`${section.section_id}`)
          .ui.basic.center.aligned.segment
            .actions
              button.ui.button.approve.green(type='submit') Create
              .ui.button.cancel.red(data-value='cancel') Cancel
          .ui.error.message


    .ui.raised.very.padded.container
      .ui.centered.grid(style='padding-top:20px;')
        +detailSection(sections, occupation)
        .ten.wide.column#main-container
          .ui.segment
            .ui.two.column.doubling.stackable.grid.container(style='padding-top:20px; margin-bottom:20px;')
              .column
                case occupation
                  when 0
                    h1.ui.header#headerContainer Assignment
                  default
                    h1.ui.header#headerContainer My Project
              .right.column
                a.right
                  case occupation
                    when 0
                      button#new.ui.button.approve.green.newAssignment(style='float: right;') Create New Assignment
                    //default
                    //  button#new.ui.button.approve.green.newProject(style='float: right;') Create New Project
            .ui.divided.items
              case occupation
                when 0
                  if assignments.length > 0
                    each assignment in assignments
                      .item
                        .content
                          .ui.two.column.grid
                            .column
                              a(href='/assignment?section_id='+section.section_id+'&assignment_id='+assignment.assignment_id+'&occupation='+occupation)
                                b(style='font-size:1.5em; padding-left:15px; padding-right:15px;') !{assignment.title}
                            .column
                              .ui.right.floated.button.green#assign(style='margin-right:19px', onclick='onClickAssign('+`${section.section_id}`+','+`$('#pairing_date_time_id').attr('value')`+',\''+assignment.assignment_id+'\',\''+assignment.title+'\',\''+assignment.description+'\')') Assign
                  else
                    p.text-center No assignment.
                default
                  if projects_in_section.length > 0
                    each project in projects_in_section
                      if project.creator === user.username
                          .item(style='padding-top:10px; padding-bottom:10px;')
                            a.ui.tiny.image(href='/project?pid='+project.pid+'&user_role=creator')
                              img(src='/images/blue-folder.png')(style='position: absolute;')
                              img.ui.avatar.image(src=`${user.img}`)(style='width: 30px;height: 30px;left:25px;top: 20px;')

                            .content
                              .ui.grid
                                .eleven.wide.column
                                  b(style='font-size:1.2em;')
                                    a.header(href='/project?pid='+project.pid+'&user_role=creator')= project.title
                                  .description= project.description
                                  | Last updated #{moment(project.createdAt).fromNow()}
                                  | (
                                  a(href='/profile/'+project.collaborator ) @#{project.collaborator}
                                  |)
                      else if project.collaborator === user.username
                        .item(style='padding-top:10px')
                          a.ui.tiny.image(href='/project?pid='+project.pid+'&user_role=creator')
                              img(src='/images/yellow-folder.png')(style='position: absolute;')
                              img.img-owner.ui.avatar.image(src=`${user.img}`)(style='width: 30px;height: 30px; top:20px;')
                              img.img-partner.ui.avatar.image(src='/images/user_img_4.jpg')(style='width:30px; height:30px; top:-10px;')

                          .content
                            b(style='font-size:1.2em;')
                              a(href='/project?pid='+project.pid+'&user_role=collaborator')= project.title
                            .description(style='margin-top:0px;')= project.description
                            | Last updated #{moment(project.createdAt).fromNow()} (
                            a(href='/profile/'+project.creator)
                              | @
                              = project.creator
                            |)
                  else
                    p.text-center No project.          
                    
        .ten.wide.column#first-sub-container(style='display:none;')
          .ui.segment
            .ui.two.column.doubling.stackable.grid.container(style='padding-top:20px; margin-bottom:20px;')
              .column
                h1.ui.header#headerContainer Student
            .ui.middle.aligned.divided.list.studentList
              if students.length > 0
                each student in students
                  .item(id=`${student.student_id}`, style='padding-left:15px; padding-right:15px;')
                    .right.floated.content
                      case occupation
                        when 0
                          a.ui.right.floated.alignedvertical.animated.removeStudent.button.red(id=`${student.enrollment_id}`, name=`${student.first_name}` + ' ' + `${student.last_name}`, value=`${student.student_id}`)
                            .hidden.content(style='color:white;') Remove
                            .visible.content
                              i.sign.out.icon
                    img.ui.avatar.image(src='images/user_img_0.jpg')
                    .content
                      p !{student.first_name} !{student.last_name}
              else
                p.text-center No student.  
                      
        .ten.wide.column#second-sub-container(style='display:none;')
          .ui.segment
            .ui.three.column.doubling.stackable.grid.container(style='padding-top:20px; margin-bottom:20px;')
              .column
                case occupation
                  when 0
                    h1.ui.header#headerContainer Pairing Session
                  default
                    h1.ui.header#headerContainer Assignment
              .column
                .ui.button.approve.teal#resetPair-button Reset Pair
              .right.column
                case occupation
                  when 0
                    a.right
                      button#new.ui.button.approve.green.newPairingSession(style='float: right;', onclick='onClickPairStudent('+`$('#pairing_date_time_id').attr('value')`+','+pairingDateTimes[0].status+')', value=`${pairingDateTimes[0].status}`) Create Session
            .ui.divided.items#pairingSession
              case occupation
                when 0
                  if pairingDateTimes.length > 0 && pairingDateTimes[0].status >= 0
                    each pairingDateTime, index in pairingDateTimes
                      .item.pairing-date-time(id=`${pairingDateTime.pairing_session_id}`, style='padding-top:10px; padding-bottom:10px; padding-left:15px; padding-right:15px;')
                        .content
                          .ui.grid
                            .eleven.wide.column
                              b(style='font-size:1.5em;')
                                case pairingDateTime.status
                                  when 0
                                    header(style='color:#5D5D5D;') Session : !{pairingTimes - index}
                                  default
                                    header.header-pending-and-active Session : !{pairingTimes - index}
                              .description
                                case pairingDateTime.status
                                  when 0
                                    p
                                      b(style='color:#5D5D5D;') Start at :
                                      font(color='#5D5D5D')  !{pairingDateTime.date_time}
                                  default
                                    p
                                      b#startAt Start at :
                                      font.font-pending-and-active  !{pairingDateTime.date_time}
                            .five.wide.column#pairing-button-column
                              case pairingDateTime.status
                                when 0
                                  .ui.right.floated.alignedvertical.animated.button(onclick='onClickViewPairingHistory('+pairingDateTime.pairing_session_id+')')
                                    .hidden.content(style='color:#5D5D5D;') View
                                    .visible.content
                                      i.eye.icon
                                when 1
                                  .ui.right.floated.button.blue#pairStudent(style='text-color:white;') Pair
                                default
                                  .ui.top.right.floated.pointing.dropdown.button.blue#viewAndInactivePairing
                                    font(color='white') Select
                                    .menu
                                      .item(onclick='onClickViewPairingHistory('+pairingDateTime.pairing_session_id+')') View
                                      .item#inactivePairingMenu(onclick='onClickInactivePairingMenu('+pairingDateTime.pairing_session_id+')') Inactive
                                  script(type='text/javascript').
                                    $('.ui.pointing.dropdown').dropdown();
                          .extra
                            case pairingDateTime.status
                              when 0
                                .ui.label#status(style='background-color:#E8E8E8; color:#665D5D;') COMPLETED
                              when 1
                                .ui.label#status(style='background-color:#f1c232; color:white;') PENDING
                              when 2
                                .ui.label#status(style='background-color:#16AB39; color:white;') ACTIVE
                  else
                    p.text-center No session.  
                default
                  if assignments.length > 0
                    each assignment in assignments
                      .item
                        .content
                          .ui.two.column.grid
                            .column
                              a(href='/assignment?section_id='+section.section_id+'&assignment_id='+assignment.assignment_id+'&occupation='+occupation)
                                b(style='font-size:1.5em; padding-left:15px; padding-right:15px;') !{assignment.title}
                  else
                    p.text-center No assignment.
